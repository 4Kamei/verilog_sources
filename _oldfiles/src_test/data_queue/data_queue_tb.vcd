$date
	Tue Aug 31 13:14:39 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module data_queue_tb $end
$var wire 8 ! i_data [7:0] $end
$var wire 1 " i_read_clk $end
$var wire 1 # i_read_en $end
$var wire 1 $ i_reset $end
$var wire 1 % i_write_clk $end
$var wire 1 & i_write_en $end
$var wire 1 ' o_has_data $end
$var wire 1 ( o_queue_full $end
$var wire 1 ) o_queue_empty $end
$var wire 8 * o_data [7:0] $end
$scope module data_queue_inst $end
$var wire 1 ' has_data $end
$var wire 8 + i_data [7:0] $end
$var wire 1 ( queue_full $end
$var wire 1 " read_clk $end
$var wire 1 # read_en $end
$var wire 1 $ reset $end
$var wire 1 % write_clk $end
$var wire 1 & write_en $end
$var wire 11 , read_data_length [10:0] $end
$var wire 1 ) queue_empty $end
$var wire 8 - o_data [7:0] $end
$var wire 1 . length_queue_full $end
$var wire 1 / data_queue_full $end
$var reg 1 0 read_data_enable $end
$var reg 11 1 read_data_length_reg [10:0] $end
$var reg 1 2 read_length_strobe $end
$var reg 1 3 reading_state $end
$var reg 11 4 write_data_length [10:0] $end
$var reg 1 5 write_length_strobe $end
$var reg 1 6 writing_state $end
$scope module data_queue_fifo_inst $end
$var wire 1 " rd_clk $end
$var wire 1 0 rd_en $end
$var wire 1 $ reset $end
$var wire 1 % wr_clk $end
$var wire 8 7 wr_data [7:0] $end
$var wire 1 & wr_en $end
$var wire 13 8 wrcdc_rd_pointer_binary [12:0] $end
$var wire 13 9 wr_pointer_gray_incremented [12:0] $end
$var wire 13 : wr_pointer_binary [12:0] $end
$var wire 13 ; rd_pointer_gray_incremented [12:0] $end
$var wire 13 < rd_pointer_binary [12:0] $end
$var wire 1 / full $end
$var wire 1 ) empty $end
$var reg 8 = rd_data [7:0] $end
$var reg 13 > rd_pointer_gray [12:0] $end
$var reg 13 ? rdcdc_wr_pointer_gray [12:0] $end
$var reg 13 @ wr_pointer_gray [12:0] $end
$var reg 13 A wrcdc_rd_pointer_gray [12:0] $end
$scope module rd_side_b2g $end
$var wire 13 B binary [12:0] $end
$var reg 13 C gray [12:0] $end
$upscope $end
$scope module rd_side_g2b $end
$var wire 13 D gray [12:0] $end
$var reg 13 E binary [12:0] $end
$var integer 32 F i [31:0] $end
$upscope $end
$scope module wr_side_b2g $end
$var wire 13 G binary [12:0] $end
$var reg 13 H gray [12:0] $end
$upscope $end
$scope module wr_side_g2b $end
$var wire 13 I gray [12:0] $end
$var reg 13 J binary [12:0] $end
$var integer 32 K i [31:0] $end
$upscope $end
$scope module wr_side_pointer_g2b $end
$var wire 13 L gray [12:0] $end
$var reg 13 M binary [12:0] $end
$var integer 32 N i [31:0] $end
$upscope $end
$upscope $end
$scope module length_queue_fifo_inst $end
$var wire 1 " rd_clk $end
$var wire 1 2 rd_en $end
$var wire 1 $ reset $end
$var wire 1 % wr_clk $end
$var wire 11 O wr_data [10:0] $end
$var wire 1 5 wr_en $end
$var wire 6 P wrcdc_rd_pointer_binary [5:0] $end
$var wire 6 Q wr_pointer_gray_incremented [5:0] $end
$var wire 6 R wr_pointer_binary [5:0] $end
$var wire 6 S rd_pointer_gray_incremented [5:0] $end
$var wire 6 T rd_pointer_binary [5:0] $end
$var wire 1 . full $end
$var wire 1 U empty $end
$var reg 11 V rd_data [10:0] $end
$var reg 6 W rd_pointer_gray [5:0] $end
$var reg 6 X rdcdc_wr_pointer_gray [5:0] $end
$var reg 6 Y wr_pointer_gray [5:0] $end
$var reg 6 Z wrcdc_rd_pointer_gray [5:0] $end
$scope module rd_side_b2g $end
$var wire 6 [ binary [5:0] $end
$var reg 6 \ gray [5:0] $end
$upscope $end
$scope module rd_side_g2b $end
$var wire 6 ] gray [5:0] $end
$var reg 6 ^ binary [5:0] $end
$var integer 32 _ i [31:0] $end
$upscope $end
$scope module wr_side_b2g $end
$var wire 6 ` binary [5:0] $end
$var reg 6 a gray [5:0] $end
$upscope $end
$scope module wr_side_g2b $end
$var wire 6 b gray [5:0] $end
$var reg 6 c binary [5:0] $end
$var integer 32 d i [31:0] $end
$upscope $end
$scope module wr_side_pointer_g2b $end
$var wire 6 e gray [5:0] $end
$var reg 6 f binary [5:0] $end
$var integer 32 g i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b110 g
bx f
bx e
b110 d
bx c
bx b
bx a
bx `
b110 _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
bx T
bx S
bx R
bx Q
bx P
bx O
b1101 N
bx M
bx L
b1101 K
bx J
bx I
bx H
bx G
b1101 F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bz 7
x6
x5
bx 4
x3
x2
bx 1
x0
x/
x.
bx -
bx ,
bz +
bx *
x)
x(
z'
z&
z%
z$
z#
z"
bz !
$end
#1
